
snippet warn_func # 
	def warn(msg):
		thisDocument.addWarning(str(msg))

snippet etqwarn # doc.addWarning(...)
	doc.addWarning(str($1))

snippet etqinfo # doc.addInformation(...)
	doc.addInformation(str($1))

snippet def # def main ... if main
	def main(doc):
		...	
	
	if __name__ in ["__builtin__", "__main__"]:
		main()

snippet etqstart # stubs ... main...
	import ntr
	ntr.Start(locals())
	from ntr.util.error import trace_errors
	TYPE_CHECKING = 0
	if TYPE_CHECKING:
		from stubs import *  # noqa

	@trace_errors
	def main(doc):
		# type: (PublicDocument) -> None
		
	
	if __name__ in ["__builtin__", "__main__"]:
		main(thisDocument)

snippet stubs # Stubs
	TYPE_CHECKING = 0
	if TYPE_CHECKING:
		from stubs import *  # noqa

snippet #t # type: () -> ()
	# type: ($1) -> $2

snippet importntr # import ntr...
	import ntr
	ntr.Start(locals())
	
snippet visibilityEdit #
	import ntr
	ntr.Start(locals())
	from ntr.util.error import trace_errors
	TYPE_CHECKING = 0
	if TYPE_CHECKING:
		from stubs import *  # noqa

    EDITABLE, UNEDITABLE  = 1, 0 

	@trace_errors(to=Rutilities.debug)
	def main():
        return EDITABLE
		
	
	if __name__ in ["__builtin__", "__main__"]:
		print(main())

snippet visibilityReadOnly #
	import ntr
	ntr.Start(locals())
	from ntr.util.error import trace_errors
	TYPE_CHECKING = 0
	if TYPE_CHECKING:
		from stubs import *  # noqa

    READONLY,NO   = 1, 0 

	@trace_errors(to=Rutilities.debug)
	def main():
        return READONLY
		
	
	if __name__ in ["__builtin__", "__main__"]:
		print(main())

snippet visibilityBooleanEdit # Edit if boolean
    """
    Set Edit for record field when
    """

    TYPE_CHECKING = 0
    if TYPE_CHECKING:
        from stubs import *  # noqa


    BOOLEAN_FIELD = ""
    EDIT_WHEN_VALUE = True


    def main(doc):
        # type: (PublicSubformRecord | PublicDocument) -> bool
        value = doc.getFieldValue(BOOLEAN_FIELD)
        return value == EDIT_WHEN_VALUE


    if __name__ in ["__builtin__", "__main__"]:
        print(main(thisSubformRecord or thisDocument))

snippet decorator # Decorator Stub

    def decorator(func):
        """
        
        """
        @functools.wraps(func)
        def wrapper_decorator(*args, **kwargs):
            # Before
            value = func(*args, **kwargs)
            # After
            return value
        return wrapper_decorator
        
snippet decoratorArgument # Decorator Stub

    def decorator(argument):
        def decorator_inner(func):
            def wrapper(*args, **kwargs):
                # Before
                result = func(*args, **kwargs)
                # After
                return result
            return wrapper
        return decorator 
